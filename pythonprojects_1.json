[
    {
        "title": "Python Tic-Tac-Toe Game",
        "content": [
            "This Python script implements a simple yet functional Tic-Tac-Toe game. Two players can play the game alternately on a 3x3 board. The program handles user inputs, checks for a winner, and declares a draw when no more moves are possible."
        ],
        "images": ["python_projects_pics/tic_tac_toe.png"],
        "description": [
            "### Key Features of the Code:",
            "1. **Board Display:** The `display` function creates a formatted string to represent the Tic-Tac-Toe board and prints it for players after every move.",
            "2. **Winner Check:** The `check_winner` function checks rows, columns, and diagonals for a winning condition and ends the game if a player wins. It also declares a draw if no spaces are left.",
            "3. **Player Moves:** The `play` function ensures that players can only place their marks on empty spaces, prompting them to try again if the field is already occupied.",
            "4. **Game Loop:** The `while True` loop alternates between the two players, allowing them to make moves, updates the board, and checks for game-ending conditions.",
            "### How It Works:",
            "- The board is initialized as a 3x3 grid filled with `.` to indicate empty spaces.",
            "- Players take turns entering their moves as coordinates (e.g., `0 1` for row 0 and column 1).",
            "- After each move, the board is displayed, and the program checks if the move led to a win or a draw.",
            "- The game ends when one player wins or all spaces are occupied.",
            "### Example Use:",
            "1. Start the game, and the empty board is displayed:",
            "   ```",
            "   ...",
            "   ...",
            "   ...",
            "   ```",
            "2. Player `O` makes the first move: `0 0`",
            "   ```",
            "   O..",
            "   ...",
            "   ...",
            "   ```",
            "3. Players alternate turns until the game ends with a win or a draw."
        ],
        "date": "2024-12-09"
    },
    {
    "title": "Building a To-Do List Application with Python and Tkinter",
    "content": [
        "This blogpost walks you through the process of creating a simple To-Do List application using Python and the Tkinter library for the graphical user interface (GUI). The application allows users to add tasks, mark them as completed, and delete tasks. Tasks are saved persistently using a JSON file."
    ],
    "images": [
        "python_projects_pics/To-Do_List.png"
    ],
    "description": [
        "### Key Features of the To-Do List Application:",
        "1. **Graphical User Interface:** The application uses Tkinter to provide a simple, user-friendly GUI.",
        "2. **Task Management:** Users can add new tasks, view open tasks, mark tasks as completed, and delete tasks.",
        "3. **Separation of Logic:** The application is divided into multiple modules: `views.py` handles the GUI, `controllers.py` manages the control logic, and `models.py` handles the data and storage logic.",
        "4. **Persistent Storage:** Tasks are stored in a JSON file (`database.json`), ensuring that tasks persist across sessions.",
        "",
        "### How the Code Works:",
        "1. **Starting the Application:** The application begins by loading existing tasks from `database.json` using the `load_from_storage` function in `models.py`.",
        "2. **Adding a Task:** When the user enters a task and clicks the 'Add task' button, the `add_task` function in `views.py` calls `handle_add_task` from `controllers.py`, which updates the task list and saves it to the JSON file.",
        "3. **Marking a Task as Completed:** The user can select a task from the open tasks list and click 'Mark as completed'. This triggers the `mark_task_completed` function, which updates the task's status and moves it to the completed tasks list.",
        "4. **Deleting a Task:** The user can delete tasks from either the open or completed lists by selecting the task and clicking 'Delete task'. This action removes the task from the list and updates the JSON file.",
        "",
        "### Code Structure:",
        "- **main.py:** The entry point of the application, which initializes the GUI and starts the Tkinter event loop.",
        "- **app/views.py:** Manages the graphical user interface and handles user interactions.",
        "- **app/controllers.py:** Contains the control logic that connects the GUI with the data layer.",
        "- **app/models.py:** Manages task data, including adding, updating, deleting, and saving tasks.",
        "- **data/database.json:** Stores tasks persistently in JSON format.",
        "",
        "### GitHub Repository:",
        "You can find the complete source code for this project on [GitHub](https://github.com/fynndohmen/To-Do-List.git)."
    ],
    "date": "2025-01-04"
},
{
    "title": "Simple Calculator App",
    "content": [
        "This Python application demonstrates a functional calculator with a graphical user interface (GUI) built using the Tkinter library. The calculator supports basic arithmetic operations, advanced features like square root and squaring, and a toggleable dark mode for a customizable user experience."
    ],
    "images": [
        "python_projects_pics/calculator.png"
    ],
    "description": [
        "### Features of the Calculator Application:",
        "1. **Basic Arithmetic:**",
        "   - Perform operations such as addition, subtraction, multiplication, and division with ease.",
        "2. **Advanced Functions:**",
        "   - Includes support for square root and squaring calculations.",
        "3. **Clear Functionality:**",
        "   - Reset the calculator display and start fresh with a single click.",
        "4. **Dark Mode:**",
        "   - Toggle between a light and dark theme to suit user preference.",
        "### GitHub Repository:",
        "You can find the complete source code for this project on [GitHub](https://github.com/fynndohmen/Calculator.git)."
    ],
    "date": "2025-01-26"
},
{
  "title": "Building a Live FinTS-Powered Expense Tracker in Python",
  "content": [
    "In this post, we present a dynamic Python expense tracker that connects directly to your bank via FinTS, automatically categorizes transactions, lets you manage and order your spending categories with a GUI, and generates rich, color-coded visualizations of your income, expenses, and balance in real time."
  ],
  "images": [
    "screenshots/visualizer_chart.png",
    "screenshots/category_manager_ui.png"
  ],
  "description": [
    "### Key Features",
    "- **Live Bank Integration**: Uses `fints_connector.py` to fetch your SEPA transactions and balance directly from your bank with FinTS-Pin/TAN.",
    "- **Smart Categorization**: The `Categorizer` prompts just once per new description and saves mappings in `categories.json` for fully automated categorization thereafter.",
    "- **Category Management GUI**: A Tkinter-based Category Manager (`category_manager.py`) lets you sort and group categories into **Fixed**, **Variable** and **Unassigned**, storing your preferences in `category_order.json`.",
    "- **Automated Color Assignment**: `ColorManager` assigns distinct colors per category from a preset palette (falling back to random hex) and persists them in `category_colors.json`.",
    "- **Real-Time Interactive Visualization**: The `Visualizer` builds a Plotly figure with:",
    "  - A **stacked area chart** of monthly fixed and variable expenses,",
    "  - A **constant income line**,",
    "  - A **running account balance** pulled live,",
    "  - **Daily cumulative expense lines** with markers and hover tooltips showing transaction details.",
    "",
    "### How It Works",
    "1. **Startup & Live Fetch**",
    "   - `main.py` initializes the FinTS connection (`FinTSConnector`), prompts for TAN when required, fetches all new transactions since the last sync, and retrieves current balances.",
    "",
    "2. **Automatic Categorization**",
    "   - Any transaction without a stored `category` triggers `Categorizer.categorize_transaction`, which asks you once and writes the result to `categories.json`.",
    "",
    "3. **Category Management**",
    "   - If `category_order.json` is missing or needs updating, the Category Manager GUI opens automatically for you to define and reorder categories.",
    "",
    "4. **Visualization**",
    "   - `Visualizer.generate_chart` reads the live-fetched, categorized transactions and balance, computes monthly sums, and renders a multi-trace Plotly dashboard with consistent colors via `ColorManager`.",
    "",
    "### Why This Approach?",
    "- **Fully Dynamic**: No manual file importsâ€”data flows directly from your bank each run.",
    "- **Modular Design**: Separates banking connector, categorization, GUI management, and plotting for easy maintenance and testing.",
    "- **Persistent Settings**: JSON files (`categories.json`, `category_order.json`, `category_colors.json`) preserve your customizations across sessions.",
    "- **Interactive Experience**: CLI TAN prompts, Tkinter UI, and Plotly tooltips give you control while automating the heavy lifting.",
    "",
    "### Getting Started",
    "1. Clone the repo and install dependencies: `git clone https://github.com/fynndohmen/expense-tracker.git && cd expense-tracker && pip install fints-client plotly pandas python-dotenv tkinter`",
    "2. Configure your `.env` with your FinTS credentials (BLZ, user ID, PIN, etc.).",
    "3. Run `python main.py` to sync, categorize, and visualize your expenses in real time!",
    "",
    "Experience instant insights into your spending right from your bank account with this Python-based, FinTS-powered expense tracker."
  ],
  "date": "2025-08-03"
}



]

