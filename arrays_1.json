[
    {
        "title": "Finding Two Numbers That Sum to a Target",
        "content": [
            "This Python function efficiently finds two numbers in a list that sum to a given target."
        ],
        "images": ["algorithms_pics/twoNumberSum.png"],
        "description": [
            "This code uses a dictionary to track numbers as it iterates through the array. Here's how it works:",
            "1. A dictionary called `seen` is initialized to store numbers that have been processed.",
            "2. For each number in the array, the difference between the target sum and the current number is calculated.",
            "3. If this difference exists in the dictionary `seen`, it means the pair of numbers that sum to the target has been found, and the function returns them.",
            "4. If the difference is not found, the current number is added to the dictionary for future reference.",
            "5. If no pair is found after iterating through the array, an empty list is returned.",
            "",
            "**Time Complexity (O(n)):**",
            "The function iterates through the array once (O(n)). For each element, it performs constant-time operations: calculating the difference, checking the dictionary for the difference (O(1) average), and adding the number to the dictionary (O(1) average). Thus, the overall time complexity is O(n).",
            "",
            "**Space Complexity (O(n)):**",
            "In the worst case, where no two numbers sum to the target, the dictionary `seen` stores every number from the input array. Therefore, the space complexity grows linearly with the input size, resulting in O(n)."
        ],
        "date": "2024-12-08"
    },
{
    "title": "Validating a Subsequence",
    "content": [
        "This Python function checks if a given sequence is a subsequence of a larger array."
    ],
    "images": ["algorithms_pics/validate_subsequence.png"],
    "description": [
        "### Explanation of the Code:",
        "1. **Function Purpose:**",
        "   - The function `isValidSubsequence()` takes two arguments: an array and a sequence.",
        "   - It returns `True` if the sequence is a valid subsequence of the array, otherwise it returns `False`.",
        "",
        "2. **How It Works:**",
        "   - The function iterates through the array and tries to match elements with the sequence. It keeps track of the position in the sequence with the variable `seqidx`.",
        "   - Each time an element in the array matches the current element in the sequence, `seqidx` is incremented to check the next element in the sequence.",
        "   - If the entire sequence is matched by the end of the array, the function returns `True`.",
        "   - If the sequence is not completely matched or the array is exhausted, it returns `False`.",
        "",
        "3. **Edge Case:**",
        "   - The function ensures that the sequence is not empty and the full sequence is present in the array before returning `True`.",
        "",
        "### Complexity Analysis:",
        "**Time Complexity (O(n)):**",
        "- The function loops through the array once (`for i in range(len(array))`), which results in a linear time complexity O(n), where *n* is the length of the array.",
        "- In each iteration, only constant-time operations (comparisons and index increments) are performed.",
        "- The loop may terminate early if the entire sequence is found before reaching the end of the array, but in the worst case, it still remains O(n).",
        "",
        "**Space Complexity (O(1)):**",
        "- The function only uses a few variables (`seqidx`, `i`), which require constant space.",
        "- No additional data structures are used, so the space complexity remains O(1)."
    ],
    "date": "2024-12-09"
},

{
    "title": "Determine the Winner of a Tournament",
    "content": [
        "This Python function calculates the winner of a tournament by processing match results and awarding points to teams based on their performance."
    ],
    "images": ["algorithms_pics/tournament_winner.png"],
    "description": [
        "### Key Features of the Tournament Winner Script:",
        "1. **Input Processing:**",
        "   - Accepts a list of competitions, where each element contains two competing teams.",
        "   - Accepts a results list that indicates the winner of each match. A value of `1` means the home team won, while `0` means the away team won.",
        "",
        "2. **Points Calculation:**",
        "   - Iterates through all matches, awarding 3 points to the winner of each competition.",
        "   - Stores the points in a dictionary where the key is the team name, and the value is the total score.",
        "",
        "3. **Determine the Winner:**",
        "   - Identifies the team(s) with the highest total points after all competitions.",
        "   - Handles tie situations by returning all teams with the highest score as co-winners.",
        "",
        "### How It Works:",
        "1. For each match in the `competitions` list, the script determines the winner based on the corresponding value in the `results` list.",
        "2. Points are added to the winning team's total in the `points` dictionary.",
        "3. After all matches, the script identifies the team(s) with the maximum score.",
        "4. If one team has the highest score, it declares them as the winner. If there is a tie, it declares multiple winners.",
        "",
        "### Complexity Analysis:",
        "**Time Complexity (O(n)):**",
        "- The function iterates through the `competitions` list once (`for i, competition in enumerate(competitions)`), performing operations in constant time for each entry.",
        "- Adding/updating values in a dictionary (`points[winner] += 3`) takes O(1) on average.",
        "- Finding the maximum score in the dictionary (`max(points.values())`) takes O(t), where *t* is the number of teams, but since *t* is generally much smaller than *n*, it is considered O(1) in Big-O notation.",
        "- The overall time complexity is **O(n)**, where *n* is the number of matches.",
        "",
        "**Space Complexity (O(n)):**",
        "- The function uses a dictionary (`points`) to store the scores of winning teams.",
        "- In the worst case, if every match introduces a new winner, the dictionary will contain up to `n + 1` teams.",
        "- Since `n + 1` is still O(n) in Big-O notation, the overall space complexity is **O(n)**."
    ],
    "date": "2024-12-10"
},

{
    "title": "Find the Minimum Non-Constructible Change",
    "content": [
        "This Python script determines the smallest amount of change that cannot be constructed using a given set of coin denominations."
    ],
    "images": ["algorithms_pics/non_constructible_change.png"],
    "description": [
        "### Key Features of the Script:",
        "1. **Input Processing:**",
        "   - Accepts a list of integers representing coin denominations.",
        "",
        "2. **Sorting for Efficiency:**",
        "   - The coins are sorted to enable a systematic approach for calculating constructible change.",
        "",
        "3. **Logic for Non-Constructible Change:**",
        "   - Iterates through the sorted coins to determine the smallest value that cannot be formed by the current sum of coins.",
        "   - If a coin is greater than the current sum of change plus 1, the next smallest non-constructible change is returned.",
        "",
        "4. **Output:**",
        "   - Returns the minimum value that cannot be constructed using the available coin denominations.",
        "",
        "### How It Works:",
        "1. The script sorts the input list of coins in ascending order.",
        "2. It initializes a variable `change` to track the largest amount of change that can be constructed so far.",
        "3. For each coin in the sorted list:",
        "   - If the coin is larger than `change + 1`, the script returns `change + 1` as the smallest non-constructible change.",
        "   - Otherwise, the coin is added to `change`, extending the range of constructible values.",
        "4. After iterating through all the coins, the script outputs the result.",
        "",
        "### Complexity Analysis:",
        "**Time Complexity (O(n log n)):**",
        "- The script begins by sorting the input list of coins. Sorting has a time complexity of **O(n log n)**, where *n* is the number of coins.",
        "- After sorting, the script iterates through the coins once, which takes **O(n)** time.",
        "- Since the sorting dominates the total runtime, the overall time complexity is **O(n log n)**.",
        "",
        "**Space Complexity (O(1)):**",
        "- The script uses only a few constant variables (`change`, `coin`, `i`) and modifies the input list in place during sorting.",
        "- There are no additional data structures that scale with the input size.",
        "- Therefore, the space complexity is **O(1)** (constant space).",
        ""
    ],
    "date": "2024-12-11"
},
{
    "title": "Matrix Transposition in Python",
    "content": [
        "This Python script demonstrates how to transpose a matrix, which involves flipping rows and columns."
    ],
    "images": ["algorithms_pics/matrix_transpose.png"],
    "description": [
        "### Key Features of the Matrix Transposition Script:",
        "1. **Input Handling:**",
        "   - Accepts a 2D list (matrix) where each inner list represents a row of the matrix.",
        "",
        "2. **Logic for Transposition:**",
        "   - Iterates through the columns of the matrix.",
        "   - For each column, constructs a new row by extracting the corresponding elements from each original row.",
        "",
        "3. **Output:**",
        "   - Returns a new 2D list where rows and columns have been swapped.",
        "",
        "### How It Works:",
        "1. The script calculates the number of rows and columns in the input matrix.",
        "2. A nested loop iterates over each column (`j`) and extracts elements from all rows (`i`).",
        "3. The extracted elements are added to a new row, which is then appended to the transposed matrix.",
        "4. The result is printed row by row, showing the transposed matrix.",
        "",
        "### Complexity Analysis:",
        "**Time Complexity (O(rows × cols)):**",
        "- The outer loop iterates through each column (cols times).",
        "- The inner loop iterates through each row (rows times).",
        "- Since every element in the matrix is accessed exactly once, the total time complexity is **O(rows × cols)**.",
        "",
        "**Space Complexity (O(rows × cols)):**",
        "- The script constructs a new 2D list to store the transposed matrix.",
        "- The size of this new matrix matches the number of columns by the number of rows of the input.",
        "- Therefore, the space complexity is **O(rows × cols)**."
    ],
    "date": "2024-12-12"
},
    {
    "title": "Finding All Unique Triplets That Sum to a Target Value",
    "content": [
        "This Python function finds all unique triplets in an array that sum up to a given target value."
    ],
    "images": ["algorithms_pics/three_number_sum.png"],
    "description": [
        "### How the Function Works:",
        "1. **Sorting the Array:**",
        "   - The array is sorted in ascending order to allow an efficient two-pointer technique.",
        "2. **Iterating Through Each Element:**",
        "   - The function loops through the array, treating each element as a potential first number of a triplet.",
        "3. **Using the Two-Pointer Technique:**",
        "   - For each element, two pointers (`left` and `right`) are initialized at the next and last index, respectively.",
        "   - The sum of the three numbers is calculated.",
        "4. **Checking Conditions:**",
        "   - If the sum matches `targetSum`, the triplet is stored, and both pointers are adjusted.",
        "   - If the sum is less than `targetSum`, the left pointer is moved forward to increase the sum.",
        "   - If the sum is greater than `targetSum`, the right pointer is moved backward to decrease the sum.",
        "5. **Returning the Result:**",
        "   - The function returns a list of all unique triplets that sum to `targetSum`.",
        
        "### Complexity Analysis:",
        "**Time Complexity:**",
        "- Sorting the array takes **O(n log n)**.",
        "- The main loop runs **O(n)** times, and within each iteration, the two-pointer approach takes **O(n)**.",
        "- This results in an overall time complexity of **O(n²)**.",
        
        "**Space Complexity:**",
        "- If only the input array is stored and modified in place, the space complexity is **O(n)**.",
        "- However, if we consider the worst case, where many triplets are found and stored, the space complexity could grow up to **O(n²)**."
    ],
    "date": "2025-03-01"
},
    {
    "title": "Finding the Pair with the Smallest Difference in Two Arrays",
    "content": [
        "This Python function finds the pair of numbers (one from each array) that have the smallest absolute difference."
    ],
    "images": ["algorithms_pics/smallest_difference.png"],
    "description": [
        "### How the Function Works:",
        "1. **Sorting the Arrays:**",
        "   - Both input arrays are sorted to enable an efficient two-pointer approach.",
        "2. **Initializing Two Pointers:**",
        "   - One pointer starts at the beginning of `arrayOne`, and the other at the beginning of `arrayTwo`.",
        "3. **Comparing Elements and Adjusting Pointers:**",
        "   - The function calculates the absolute difference between the current elements.",
        "   - If an exact match is found (difference = 0), the function immediately returns the pair.",
        "   - If the first number is smaller, its pointer is moved forward to increase the value.",
        "   - If the second number is smaller, its pointer is moved forward instead.",
        "4. **Updating the Smallest Difference:**",
        "   - The function keeps track of the smallest difference found so far.",
        "   - If a new pair with a smaller difference is found, it updates the stored result.",
        "5. **Returning the Closest Pair:**",
        "   - Once all elements are processed, the pair with the smallest difference is returned.",
        
        "### Complexity Analysis:",
        "**Time Complexity:**",
        "- Sorting `arrayOne` takes **O(n log n)**, and sorting `arrayTwo` takes **O(m log m)**.",
        "- The two-pointer approach iterates through both arrays in **O(n + m)**.",
        "- Overall, the total time complexity is **O(n log n + m log m)**.",
        
        "**Space Complexity:**",
        "- Since sorting is performed in-place, the function does not require extra memory beyond a few variables.",
        "- The result list stores only two numbers, making the worst-case space complexity **O(1)**."
    ],
    "date": "2025-03-02"
},
    {
    "title": "Moving a Specific Element to the End of an Array",
    "content": [
        "This Python function efficiently moves all occurrences of a given element to the end of an array while maintaining the relative order of the other elements."
    ],
    "images": ["algorithms_pics/move_element_to_end.png"],
    "description": [
        "### How the Function Works:",
        "1. **Using Two Pointers for Efficiency:**",
        "   - The function initializes two pointers: `i` at the start and `j` at the end of the array.",
        "2. **Shifting the Right Pointer (`j`):**",
        "   - If `array[j]` is already equal to `toMove`, it is skipped by decrementing `j`.",
        "3. **Swapping Elements if Necessary:**",
        "   - If `array[i]` is equal to `toMove`, it is swapped with `array[j]`, ensuring that `toMove` moves towards the end.",
        "4. **Moving the Left Pointer (`i`):**",
        "   - The `i` pointer moves forward, continuing until `i` meets `j`.",
        "5. **Returning the Modified Array:**",
        "   - Once all `toMove` elements have been relocated, the modified array is returned.",
        
        "### Complexity Analysis:",
        "**Time Complexity:**",
        "- The function processes each element at most once, making the time complexity **O(n)**, where `n` is the length of the array.",
        
        "**Space Complexity:**",
        "- Since the function operates in-place without using additional memory, the space complexity is **O(1)**."
    ],
    "date": "2025-03-03"
},
    {
    "title": "Checking If an Array Is Monotonic in Python",
    "content": [
        "This Python function determines whether a given array is monotonic, meaning it is either entirely non-increasing or non-decreasing."
    ],
    "images": ["algorithms_pics/is_monotonic.png"],
    "description": [
        "### How the Function Works:",
        "1. **Handling Small Arrays Efficiently:**",
        "   - If the array contains two or fewer elements, it is always monotonic and the function returns `True` immediately.",
        "2. **Tracking Trends Using Two Boolean Variables:**",
        "   - Two boolean variables, `increasing` and `decreasing`, are initialized to `True`.",
        "   - These will be updated while iterating through the array.",
        "3. **Iterating Through the Array:**",
        "   - The function loops through the array and compares each element with the next one.",
        "   - If a decreasing trend is found, `increasing` is set to `False`.",
        "   - If an increasing trend is found, `decreasing` is set to `False`.",
        "4. **Returning the Result:**",
        "   - If the array remains either fully increasing (`increasing == True`) or fully decreasing (`decreasing == True`), it is monotonic and the function returns `True`.",
        "   - Otherwise, it returns `False`.",
        
        "### Complexity Analysis:",
        "**Time Complexity:**",
        "- The function iterates through the array once, making the time complexity **O(n)**, where `n` is the length of the array.",
        
        "**Space Complexity:**",
        "- Since the function only uses a few boolean variables and no extra data structures, the space complexity is **O(1)**."
    ],
    "date": "2025-03-04"
},
    {
    "title": "Traversing a 2D Array in Spiral Order Using Python",
    "content": [
        "This Python function extracts elements from a 2D array in a spiral order, starting from the top-left corner and moving inward."
    ],
    "images": ["algorithms_pics/spiral_traverse.png"],
    "description": [
        "### How the Function Works:",
        "1. **Handling Edge Cases:**",
        "   - If the input array is empty, the function returns an empty list immediately.",
        "2. **Defining Boundaries:**",
        "   - Four boundary variables (`top`, `bottom`, `left`, `right`) are initialized to track the limits of traversal.",
        "3. **Spiral Traversal Logic:**",
        "   - The function iterates through the matrix layer by layer while `top` ≤ `bottom` and `left` ≤ `right`.",
        "   - It follows four sequential steps:",
        "     - **Traverse from Left to Right** (Top Row)",
        "     - **Traverse from Top to Bottom** (Right Column)",
        "     - **Traverse from Right to Left** (Bottom Row, if applicable)",
        "     - **Traverse from Bottom to Top** (Left Column, if applicable)",
        "   - After each pass, the corresponding boundary is adjusted inward to prevent revisiting elements.",
        "4. **Returning the Result:**",
        "   - The function accumulates elements in a result list and returns the list when traversal is complete.",
        
        "### Complexity Analysis:",
        "**Time Complexity:**",
        "- The function visits each element in the 2D array exactly once, making the time complexity **O(n)**, where `n` is the total number of elements.",
        
        "**Space Complexity:**",
        "- The function stores the result in a list containing all `n` elements, making the space complexity **O(n)**."
    ],
    "date": "2025-03-05"
},
    {
    "title": "Finding the Longest Peak in an Array Using Python",
    "content": [
        "This Python function efficiently finds the longest peak in an array. A peak is defined as a sequence of increasing numbers followed by a sequence of decreasing numbers."
    ],
    "images": ["algorithms_pics/longest_peak.png"],
    "description": [
        "### How the Function Works:",
        "1. **Identifying a Peak:**",
        "   - A peak is detected when an element is greater than both its left and right neighbors (`array[i - 1] < array[i] > array[i + 1]`).",
        "2. **Expanding the Peak:**",
        "   - Once a peak is found, the function expands left and right to determine the full length of the peak.",
        "   - The left expansion continues while numbers are increasing (`array[left] > array[left - 1]`).",
        "   - The right expansion continues while numbers are decreasing (`array[right] > array[right + 1]`).",
        "3. **Updating the Longest Peak:**",
        "   - The peak length is calculated as `right - left + 1`.",
        "   - If this peak is the longest found so far, it updates the stored `longest_peak` value.",
        "4. **Skipping Processed Peaks:**",
        "   - After processing a peak, the function jumps ahead by setting `i = right + 1` to avoid unnecessary checks.",
        "5. **Returning the Result:**",
        "   - The function returns the length of the longest peak found in the array.",
        
        "### Complexity Analysis:",
        "**Time Complexity:**",
        "- Each element is visited at most once, making the time complexity **O(n)**, where `n` is the length of the array.",
        
        "**Space Complexity:**",
        "- The function operates in-place and only uses a few integer variables, making the space complexity **O(1)**."
    ],
    "date": "2025-03-06"
}

    

]
