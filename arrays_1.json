[
    {
        "title": "Finding Two Numbers That Sum to a Target",
        "content": [
            "This Python function efficiently finds two numbers in a list that sum to a given target."
        ],
        "images": ["algorithms_pics/twoNumberSum.png"],
        "description": [
            "This code uses a dictionary to track numbers as it iterates through the array. Here's how it works:",
            "1. A dictionary called `seen` is initialized to store numbers that have been processed.",
            "2. For each number in the array, the difference between the target sum and the current number is calculated.",
            "3. If this difference exists in the dictionary `seen`, it means the pair of numbers that sum to the target has been found, and the function returns them.",
            "4. If the difference is not found, the current number is added to the dictionary for future reference.",
            "5. If no pair is found after iterating through the array, an empty list is returned.",
            "",
            "**Time Complexity (O(n)):**",
            "The function iterates through the array once (O(n)). For each element, it performs constant-time operations: calculating the difference, checking the dictionary for the difference (O(1) average), and adding the number to the dictionary (O(1) average). Thus, the overall time complexity is O(n).",
            "",
            "**Space Complexity (O(n)):**",
            "In the worst case, where no two numbers sum to the target, the dictionary `seen` stores every number from the input array. Therefore, the space complexity grows linearly with the input size, resulting in O(n)."
        ],
        "date": "2024-12-08"
    },
{
    "title": "Validating a Subsequence",
    "content": [
        "This Python function checks if a given sequence is a subsequence of a larger array."
    ],
    "images": ["algorithms_pics/validate_subsequence.png"],
    "description": [
        "### Explanation of the Code:",
        "1. **Function Purpose:**",
        "   - The function `isValidSubsequence()` takes two arguments: an array and a sequence.",
        "   - It returns `True` if the sequence is a valid subsequence of the array, otherwise it returns `False`.",
        "",
        "2. **How It Works:**",
        "   - The function iterates through the array and tries to match elements with the sequence. It keeps track of the position in the sequence with the variable `seqidx`.",
        "   - Each time an element in the array matches the current element in the sequence, `seqidx` is incremented to check the next element in the sequence.",
        "   - If the entire sequence is matched by the end of the array, the function returns `True`.",
        "   - If the sequence is not completely matched or the array is exhausted, it returns `False`.",
        "",
        "3. **Edge Case:**",
        "   - The function ensures that the sequence is not empty and the full sequence is present in the array before returning `True`.",
        "",
        "### Complexity Analysis:",
        "**Time Complexity (O(n)):**",
        "- The function loops through the array once (`for i in range(len(array))`), which results in a linear time complexity O(n), where *n* is the length of the array.",
        "- In each iteration, only constant-time operations (comparisons and index increments) are performed.",
        "- The loop may terminate early if the entire sequence is found before reaching the end of the array, but in the worst case, it still remains O(n).",
        "",
        "**Space Complexity (O(1)):**",
        "- The function only uses a few variables (`seqidx`, `i`), which require constant space.",
        "- No additional data structures are used, so the space complexity remains O(1)."
    ],
    "date": "2024-12-09"
},

{
    "title": "Determine the Winner of a Tournament",
    "content": [
        "This Python function calculates the winner of a tournament by processing match results and awarding points to teams based on their performance."
    ],
    "images": ["algorithms_pics/tournament_winner.png"],
    "description": [
        "### Key Features of the Tournament Winner Script:",
        "1. **Input Processing:**",
        "   - Accepts a list of competitions, where each element contains two competing teams.",
        "   - Accepts a results list that indicates the winner of each match. A value of `1` means the home team won, while `0` means the away team won.",
        "",
        "2. **Points Calculation:**",
        "   - Iterates through all matches, awarding 3 points to the winner of each competition.",
        "   - Stores the points in a dictionary where the key is the team name, and the value is the total score.",
        "",
        "3. **Determine the Winner:**",
        "   - Identifies the team(s) with the highest total points after all competitions.",
        "   - Handles tie situations by returning all teams with the highest score as co-winners.",
        "",
        "### How It Works:",
        "1. For each match in the `competitions` list, the script determines the winner based on the corresponding value in the `results` list.",
        "2. Points are added to the winning team's total in the `points` dictionary.",
        "3. After all matches, the script identifies the team(s) with the maximum score.",
        "4. If one team has the highest score, it declares them as the winner. If there is a tie, it declares multiple winners.",
        "",
        "### Complexity Analysis:",
        "**Time Complexity (O(n)):**",
        "- The function iterates through the `competitions` list once (`for i, competition in enumerate(competitions)`), performing operations in constant time for each entry.",
        "- Adding/updating values in a dictionary (`points[winner] += 3`) takes O(1) on average.",
        "- Finding the maximum score in the dictionary (`max(points.values())`) takes O(t), where *t* is the number of teams, but since *t* is generally much smaller than *n*, it is considered O(1) in Big-O notation.",
        "- The overall time complexity is **O(n)**, where *n* is the number of matches.",
        "",
        "**Space Complexity (O(n)):**",
        "- The function uses a dictionary (`points`) to store the scores of winning teams.",
        "- In the worst case, if every match introduces a new winner, the dictionary will contain up to `n + 1` teams.",
        "- Since `n + 1` is still O(n) in Big-O notation, the overall space complexity is **O(n)**."
    ],
    "date": "2024-12-10"
},

{
    "title": "Find the Minimum Non-Constructible Change",
    "content": [
        "This Python script determines the smallest amount of change that cannot be constructed using a given set of coin denominations."
    ],
    "images": ["algorithms_pics/non_constructible_change.png"],
    "description": [
        "### Key Features of the Script:",
        "1. **Input Processing:**",
        "   - Accepts a list of integers representing coin denominations.",
        "",
        "2. **Sorting for Efficiency:**",
        "   - The coins are sorted to enable a systematic approach for calculating constructible change.",
        "",
        "3. **Logic for Non-Constructible Change:**",
        "   - Iterates through the sorted coins to determine the smallest value that cannot be formed by the current sum of coins.",
        "   - If a coin is greater than the current sum of change plus 1, the next smallest non-constructible change is returned.",
        "",
        "4. **Output:**",
        "   - Returns the minimum value that cannot be constructed using the available coin denominations.",
        "",
        "### How It Works:",
        "1. The script sorts the input list of coins in ascending order.",
        "2. It initializes a variable `change` to track the largest amount of change that can be constructed so far.",
        "3. For each coin in the sorted list:",
        "   - If the coin is larger than `change + 1`, the script returns `change + 1` as the smallest non-constructible change.",
        "   - Otherwise, the coin is added to `change`, extending the range of constructible values.",
        "4. After iterating through all the coins, the script outputs the result.",
        "",
        "### Complexity Analysis:",
        "**Time Complexity (O(n log n)):**",
        "- The script begins by sorting the input list of coins. Sorting has a time complexity of **O(n log n)**, where *n* is the number of coins.",
        "- After sorting, the script iterates through the coins once, which takes **O(n)** time.",
        "- Since the sorting dominates the total runtime, the overall time complexity is **O(n log n)**.",
        "",
        "**Space Complexity (O(1)):**",
        "- The script uses only a few constant variables (`change`, `coin`, `i`) and modifies the input list in place during sorting.",
        "- There are no additional data structures that scale with the input size.",
        "- Therefore, the space complexity is **O(1)** (constant space).",
        ""
    ],
    "date": "2024-12-11"
}

},
{
    "title": "Matrix Transposition in Python",
    "content": [
        "This Python script demonstrates how to transpose a matrix, which involves flipping rows and columns."
    ],
    "images": ["algorithms_pics/matrix_transpose.png"],
    "description": [
        "### Key Features of the Matrix Transposition Script:",
        "1. **Input Handling:**",
        "   - Accepts a 2D list (matrix) where each inner list represents a row of the matrix.",
        "2. **Logic for Transposition:**",
        "   - Iterates through the columns of the matrix.",
        "   - For each column, constructs a new row by extracting the corresponding elements from each original row.",
        "3. **Output:**",
        "   - Returns a new 2D list where rows and columns have been swapped.",
        "### How It Works:",
        "1. The script calculates the number of rows and columns in the input matrix.",
        "2. A nested loop iterates over each column (`j`) and extracts elements from all rows (`i`).",
        "3. The extracted elements are added to a new row, which is then appended to the transposed matrix.",
        "4. The result is printed row by row, showing the transposed matrix.",
        "### Benefits:",
        "- Provides a clear and simple method to transpose any rectangular matrix.",
        "- Useful for applications in data analysis, image processing, and scientific computations."
    ],
    "date": "2024-12-12"
}  
]
