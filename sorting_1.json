[
 {
    "title": "Bubble Sort Algorithm in Python",
    
    "content": [
        "This Python function implements the Bubble Sort algorithm, a simple sorting technique that repeatedly swaps adjacent elements if they are in the wrong order."
    ],
    
    "images": [
        "algorithms_pics/bubble_sort.png"
    ],
    
    "description": [
        "### Key Features of the Bubble Sort Algorithm:",
        
        "1. **Iterative Sorting Approach:** The algorithm iterates over the list multiple times, gradually placing larger elements towards the end.",
        
        "2. **Swapping Mechanism:** If two adjacent elements are out of order, they are swapped to ensure the correct sequence.",
        
        "3. **Pass-by-Pass Sorting:** After each full pass, the largest unsorted element moves to its correct position.",
        
        "4. **Stable Sorting Algorithm:** Bubble Sort maintains the relative order of equal elements, making it a stable sorting method.",
        
        "",
        "### How It Works:",
        
        "1. The algorithm runs two nested loops: an outer loop for multiple passes and an inner loop for comparing adjacent elements.",
        
        "2. Each iteration moves the largest unsorted element to its correct position at the end of the array.",
        
        "3. The process continues until no more swaps are needed, ensuring the array is fully sorted.",
        
        "4. The sorted array is returned at the end of the function execution.",
        
        "",
        "### Complexity Analysis:",
        
        "**Time Complexity:**",
        "- Bubble Sort consists of two nested loops, leading to **O(n²)** comparisons in the worst and average cases.",
        "- If the array is already sorted, an optimized version of Bubble Sort would detect this in **O(n)** time, but this implementation runs in **O(n²)**.",
        
        "**Space Complexity:**",
        "- The algorithm sorts the array in-place, requiring only a few extra variables for swapping.",
        "- As no additional data structures are used, the space complexity remains **O(1)**."
    ],
    
    "date": "2025-01-12"
}
,
  {
    "title": "Sorting an Array Using Insertion Sort",
    
    "content": [
        "This Python function implements the Insertion Sort algorithm, a simple and intuitive sorting technique."
    ],
    
    "images": [
        "algorithms_pics/insertion_sort.png"
    ],
    
    "description": [
        "### How the Insertion Sort Algorithm Works:",
        
        "1. **Iterating Through the Array:**",
        "   - The function loops through the array, treating the first element as a sorted sublist.",
        
        "2. **Comparing Elements:**",
        "   - Each new element is compared to the elements in the sorted sublist.",
        "   - If an element in the sorted part is larger than the current element, it is shifted one position to the right.",
        
        "3. **Placing the Key in the Correct Position:**",
        "   - The current element (key) is inserted in its correct position within the sorted sublist.",
        
        "4. **Repeating Until Sorted:**",
        "   - This process continues until all elements are sorted.",
        
        "",
        "### Complexity Analysis:",
        
        "**Time Complexity:**",
        "- In the worst and average cases, each element must be compared and shifted up to `O(n)` times.",
        "- Since this happens for `n` elements, the total time complexity is **O(n²)**.",
        "- In the best case (already sorted array), each element is only compared once, leading to **O(n)**.",
        
        "**Space Complexity:**",
        "- Insertion Sort is an in-place sorting algorithm, meaning it does not use extra memory for another data structure.",
        "- Only a few additional variables are used (`key`, `i`, `j`), making the space complexity **O(1)**."
    ],
    
    "date": "2025-01-13"
}
,
  {
    "title": "Sorting an Array Using Selection Sort",
    "content": [
        "Selection Sort is a simple comparison-based sorting algorithm that repeatedly selects the smallest element from an unsorted section and moves it to its correct position."
    ],
    "images": ["algorithms_pics/selection_sort.png"],
    "description": [
        "### How Selection Sort Works:",
        "1. **Finding the Minimum:** The algorithm iterates through the array and finds the smallest element.",
        "2. **Swapping Elements:** It swaps the smallest element found with the first unsorted element.",
        "3. **Repeating the Process:** The process continues for the remaining unsorted section until the entire array is sorted.",
        "",
        "### Steps in the Code:",
        "1. The algorithm loops through each element in the array.",
        "2. For each element, it searches for the smallest element in the remaining unsorted part of the array.",
        "3. Once found, it swaps the smallest element with the current element at the correct position.",
        "4. The process repeats until the array is sorted."
    ],
    "date": "2025-01-14"
}


]

