[
  {
    "title": "Checking if a String is a Palindrome",
    "content": [
        "This Python function determines whether a given string is a palindrome using an efficient two-pointer technique."
    ],
    "images": [
        "algorithms_pics/palindrome_check.png"
    ],
    "description": [
        "### What is a Palindrome?",
        "A palindrome is a word, phrase, or sequence that reads the same forward and backward.",
        "For example, 'racecar' and 'madam' are palindromes, while 'hello' is not.",
        
        "### How the Function Works:",
        "1. The function initializes two pointers: `leftIdx` at the start and `rightIdx` at the end of the string.",
        "2. A while loop runs as long as `leftIdx` is less than `rightIdx`.",
        "3. In each iteration, the characters at `leftIdx` and `rightIdx` are compared.",
        "   - If they are different, the function returns `False`, meaning the string is not a palindrome.",
        "   - If they match, the pointers move toward the center (`leftIdx += 1`, `rightIdx -= 1`).",
        "4. If all character comparisons pass, the function returns `True`, confirming the string is a palindrome.",
        
        "### Complexity Analysis:",
        "**Time Complexity:**",
        "- The function iterates through at most half of the string (`n/2` comparisons).",
        "- Each comparison takes `O(1)`, so the overall time complexity is **O(n)**.",
        
        "**Space Complexity:**",
        "- The function operates directly on the input string without creating additional data structures.",
        "- Since only a few integer variables (`leftIdx`, `rightIdx`) are used, the space complexity is **O(1)**."
    ],
    "date": "2025-01-14"
}
,
{
    "title": "Encrypting Text with Caesar Cipher in Python",
    "content": [
        "This Python function implements the Caesar Cipher encryption technique, shifting each letter in a string by a given key."
    ],
    "images": ["algorithms_pics/caesar_cipher.png"],
    "description": [
        "### How the Caesar Cipher Works:",
        "1. **Letter Shifting:**",
        "   - Each letter in the string is shifted forward by a given key value.",
        "   - If the end of the alphabet is reached, the shifting continues from the beginning (e.g., 'z' with a shift of 2 becomes 'b').",
        
        "2. **Step-by-Step Explanation of the Transformation Formula:**",
        "   The function modifies each character using the formula:",
        "   ```python",
        "   chr(((ord(char) - ord('a') + key) % 26) + ord('a'))",
        "   ```",
        "   Let's break it down step by step:",
        
        "   - **Step 1:** Convert the character to its ASCII value using `ord(char)`. For example, `ord('x')` returns `120`.",
        "   - **Step 2:** Subtract `ord('a')` (which is `97`) to get a zero-based index. For 'x':",
        "     ```",
        "     ord('x') - ord('a') = 120 - 97 = 23",
        "     ```",
        "   - **Step 3:** Add the shift `key` to shift the letter forward. Assuming `key = 2`:",
        "     ```",
        "     23 + 2 = 25",
        "     ```",
        "   - **Step 4:** Use modulo `26` to ensure the result stays within bounds of the alphabet. If the key moves beyond 'z', it wraps around:",
        "     ```",
        "     (23 + 2) % 26 = 25",
        "     ```",
        "   - **Step 5:** Convert the result back to an ASCII value by adding `ord('a')`. This ensures it remains a lowercase letter:",
        "     ```",
        "     25 + 97 = 122  → chr(122) = 'z'",
        "     ```",
        
        "3. **Modulo Operation for Wrap-Around:**",
        "   - The modulo `26` ensures that shifting a letter past 'z' wraps around to 'a'.",
        "   - Example: shifting 'y' by 3 results in 'b':",
        "     ```",
        "     (ord('y') - ord('a') + 3) % 26 + ord('a') = 'b'",
        "     ```",

        "### Complexity Analysis:",
        "**Time Complexity:**",
        "- The function iterates through the string once, processing each character in `O(1)`. Since there are `n` characters, the total time complexity is **O(n)**.",
        
        "**Space Complexity:**",
        "- The function stores the transformed characters in a list and joins them into a new string, requiring **O(n) space**.",
        "- Since no extra data structures are used apart from the result storage, the space complexity remains **O(n)**."
    ],
    "date": "2025-01-15"
}
,
{
    "title": "Run-Length Encoding in Python",
    "content": [
        "This Python function compresses a string using run-length encoding (RLE), a simple form of data compression."
    ],
    "images": ["algorithms_pics/run_length_encoding.png"],
    "description": [
        "### How Run-Length Encoding Works:",
        "1. **Concept:** Run-length encoding replaces consecutive duplicate characters in a string with a count followed by the character itself.",
        "2. **Processing the String:**",
        "   - The function iterates through the string, counting consecutive identical characters.",
        "   - If the sequence exceeds 9 characters, it is split into multiple segments since a single digit is used to represent the count.",
        "3. **Output Format:** The compressed string consists of alternating numbers and characters representing the character count and the character itself.",
        
        "### Complexity Analysis:",
        "**Time Complexity:**",
        "- The function iterates through the input string once, making it **O(n)**.",
        "- Each character is processed at most twice (once in the main loop and potentially in the `while` loop for long sequences), but this remains linear.",
        
        "**Space Complexity:**",
        "- The output string can be at most **twice the length of the input** (e.g., `AAAAAAAAAA` → `9A1A`).",
        "- This results in a worst-case space complexity of **O(n)**."
    ],
    "date": "2025-01-16"
}
,
 {
    "title": "Finding Common Characters in Multiple Strings",
    "content": [
        "This Python function identifies characters that appear in every string within a given list."
    ],
    "images": ["algorithms_pics/common_characters.png"],
    "description": [
        "### How the Function Works:",
        "1. **Initializing the Character Set:**",
        "   - The function starts with a set of characters from the first string.",
        "2. **Finding Common Characters:**",
        "   - It iterates through the remaining strings and keeps only the characters that exist in all of them.",
        "3. **Returning the Result:**",
        "   - The final set of common characters is converted to a list and returned.",
        
        "### Complexity Analysis:",
        "**Time Complexity:**",
        "- The function converts the first string into a set, which takes **O(m)** time, where `m` is the length of the first string.",
        "- For each of the remaining `n - 1` strings, it creates a set (`O(k)`) and intersects it with the existing character set (`O(min(m, k))`).",
        "- Since this operation is performed for `n` strings, the overall complexity is **O(n * k)**, where `k` is the average string length.",
        
        "**Space Complexity:**",
        "- The main memory usage comes from storing the `common_chars` set, which has at most `O(m)` elements.",
        "- The function does not use extra space proportional to the number of strings, making the total space complexity **O(m)**."
    ],
    "date": "2025-01-17"
}
,
  {
    "title": "Checking if a Document Can Be Created from Given Characters",
    "content": [
        "This Python function verifies whether a given document can be formed using characters from a provided string."
    ],
    "images": ["algorithms_pics/generate_document.png"],
    "description": [
        "### Explanation of the Function:",
        "1. **Character Frequency Count:**",
        "   - The function first counts the occurrences of each character in the `characters` string and stores them in a dictionary.",
        "2. **Verification Process:**",
        "   - It then iterates through the `document` string, checking if each character is available in sufficient quantity.",
        "3. **Handling Character Shortages:**",
        "   - If a required character is missing or insufficient, the function immediately returns `False`.",
        "4. **Reducing Character Counts:**",
        "   - If a character is found in the `characters` string, its count is reduced to reflect that it has been used.",
        "5. **Final Result:**",
        "   - If all characters in the document can be matched with available characters, the function returns `True`.",
        
        "### Complexity Analysis:",
        "**Time Complexity:**",
        "- The function processes the `characters` string once to build the frequency dictionary (**O(c)**).",
        "- It then iterates through the `document` string, checking availability in the dictionary (**O(d)**).",
        "- Both operations combined result in an overall time complexity of **O(c + d)**.",
        
        "**Space Complexity:**",
        "- The function stores character counts in a dictionary, requiring **O(c) space**, where `c` is the number of unique characters in `characters`.",
        "- Apart from the dictionary, only a few variables are used, keeping additional space usage at **O(1)**.",
        "- Overall, the worst-case space complexity remains **O(c)**."
    ],
    "date": "2025-01-18"
}
,
{
    "title": "Finding the First Non-Repeating Character in a String",
    "content": [
        "This Python function identifies the first non-repeating character in a given string and returns its index."
    ],
    "images": ["algorithms_pics/first_non_repeating_character.png"],
    "description": [
        "### How the Function Works:",
        "1. **Counting Character Frequency:**",
        "   - A dictionary is used to store the frequency of each character in the string.",
        "   - The function iterates through the string, updating the count for each character.",
        "2. **Finding the First Non-Repeating Character:**",
        "   - The function makes a second pass through the string to check for the first character with a frequency of `1`.",
        "   - When found, the function returns the index of that character.",
        "3. **Returning -1 if No Unique Character Exists:**",
        "   - If no character appears exactly once, the function returns `-1`."
    ],
    "date": "2025-01-19"
},
  {
    "title": "Finding Semordnilap Pairs in a List of Words",
    "content": [
        "This Python function finds pairs of words in a list that are semordnilaps—words that spell another valid word when reversed."
    ],
    "images": ["algorithms_pics/semordnilap.png"],
    "description": [
        "### How the Function Works:",
        "1. **Using a Set for Quick Lookups:**",
        "   - All words from the input list are stored in a set for fast access.",
        "2. **Iterating Through the Words:**",
        "   - Each word is reversed and checked if it exists in the set.",
        "   - If the reversed word is found and it is not the same as the original word, the pair is added to the results.",
        "3. **Avoiding Duplicate Pairs:**",
        "   - Once a semordnilap pair is found, both words are removed from the set to prevent duplication in the output.",
        "4. **Returning the List of Pairs:**",
        "   - The function returns a list of semordnilap pairs found in the input list."
    ],
    "date": "2025-01-20"
}


]
