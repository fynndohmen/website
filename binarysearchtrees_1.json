[
{
    "title": "Finding the Closest Value in a Binary Search Tree (BST)",
    "content": [
        "This Python function efficiently finds the value in a Binary Search Tree (BST) that is closest to a given target value."
    ],
    "images": ["algorithms_pics/find_closest_bst0.png", "algorithms_pics/find_closest_bst1.png"],
    "description": [
        "### Key Features of the Closest Value in BST Function:",
        "1. **Binary Search Tree Properties:**",
        "   - Each node in a BST has a value and two child nodes: `left` and `right`.",
        "   - The left child node contains values smaller than the parent node.",
        "   - The right child node contains values greater than the parent node.",
        "",
        "2. **Logic for Finding the Closest Value:**",
        "   - The function starts at the root node and initializes the `closest` variable to infinity.",
        "   - It traverses the tree while updating the closest value if the current node's value is nearer to the target.",
        "   - Depending on whether the target is smaller or larger than the current node's value, it moves to the left or right subtree, respectively.",
        "",
        "3. **Output:**",
        "   - Returns the value in the BST that is closest to the target.",
        "",
        "### Complexity Analysis:",
        "**Time Complexity:**",
        "- In the average and best cases (balanced BST), the time complexity is **O(log n)**, as each step reduces the search space by half.",
        "- In the worst case (unbalanced BST, resembling a linked list), the time complexity is **O(n)** because the function may traverse the entire tree.",
        "",
        "**Space Complexity:**",
        "- The space complexity for this iterative solution is **O(1)** because only a few variables (e.g., `closest`, `currentNode`) are used.",
        "- In a recursive approach, the space complexity would be **O(h)**, where `h` is the height of the tree (up to **O(n)** in the worst case)."
    ],
    "date": "2024-12-13"
},{
  "title": "Implementing a Binary Search Tree (BST) in Python",
  "content": [
    "This Python class implements a Binary Search Tree (BST) with support for insertion, search, and removal operations. The BST is a fundamental data structure that stores elements in an ordered manner, allowing efficient lookups and updates."
  ],
  "images": [
    "algorithms_pics/bst_construction1.png",
    "algorithms_pics/bst_construction2.png"
  ],
  "description": [
    "### Key Features of the BST Class:",

    "1. **Insert Method (`insert`)**",
    "- Adds a new value to the BST while maintaining the binary search property.",
    "- Traverses the tree from the root, placing the new value in the appropriate position based on comparisons.",

    "2. **Search Method (`contains`)**",
    "- Checks whether a given value exists in the BST.",
    "- Starts at the root and follows the left or right child depending on whether the target value is smaller or larger.",

    "3. **Remove Method (`remove`)**",
    "- Removes a node from the BST while preserving the structure.",
    "- Handles three cases: node with two children, one child, or no children.",
    "- For a node with two children, it replaces the node's value with the smallest value from its right subtree (in-order successor).",
    "- For root deletions with one child, it adjusts the root node to simulate in-place removal.",

    "4. **Helper Method (`getMinValue`)**",
    "- Traverses to the leftmost node of a subtree to find the minimum value (used during removal).",

    "### Complexity Analysis:",

    "**Time Complexity (Average Case):**",
    "- Insertion, Search, and Deletion: O(log n)",

    "**Time Complexity (Worst Case):**",
    "- If the BST becomes unbalanced (e.g., resembles a linked list), operations degrade to O(n)",

    "**Space Complexity:**",
    "- O(1) auxiliary space for iterative methods, O(h) stack space for recursive removal where h is tree height."
  ],
  "date": "2025-03-16"
},
    {
  "title": "Validating a Binary Search Tree (BST) in Python",
  "content": [
    "This Python function checks whether a given binary tree satisfies the properties of a Binary Search Tree (BST)."
  ],
  "images": [
    "algorithms_pics/bst_validation.png"
  ],
  "description": [
    "### How the Function Works:",
    "1. **What Makes a Tree a Valid BST?**",
    "- In a valid BST, every node must satisfy two conditions:",
    "  - All values in the left subtree are strictly less than the node’s value.",
    "  - All values in the right subtree are greater than or equal to the node’s value.",
    "- These rules must hold recursively for every node in the tree.",
    
    "2. **Recursive Validation with Min/Max Constraints:**",
    "- A helper function `validateBstHelper()` is used to traverse the tree recursively.",
    "- It ensures that each node’s value lies within a valid range defined by `minValue` and `maxValue`.",
    "- The left child is checked with an updated upper bound, and the right child with an updated lower bound.",
    
    "3. **Why This Approach is Reliable:**",
    "- Unlike an in-order traversal check, this method directly validates BST rules at each node.",
    "- It immediately detects violations deep in the tree structure, even if the overall order appears correct.",
    
    "### Complexity Analysis:",
    "**Time Complexity:** O(n) — Each node is visited once.",
    "**Space Complexity:**",
    "- O(log n) for a balanced tree due to recursion depth.",
    "- O(n) in the worst case (e.g., a skewed tree)."
  ],
  "date": "2025-03-17"
},
    {
  "title": "BST Traversals in Python: In-Order, Pre-Order, and Post-Order",
  "content": [
    "This Python code demonstrates the three fundamental depth-first traversal methods for Binary Search Trees (BSTs): in-order, pre-order, and post-order."
  ],
  "images": [
    "algorithms_pics/bst_traversal.png"
  ],
  "description": [
    "### In-Order Traversal (`inOrderTraverse`):",
    "- Traverses the left subtree, visits the current node, then traverses the right subtree.",
    "- For Binary Search Trees (BSTs), this traversal returns the node values in sorted order.",
    "- Useful when you need to extract values from a BST in ascending order.",

    "### Pre-Order Traversal (`preOrderTraverse`):",
    "- Visits the current node first, then traverses the left and right subtrees.",
    "- This is useful for tasks like copying a Binary Search Tree (BST) or serializing it.",
    "- Follows the pattern: **Root → Left → Right**.",

    "### Post-Order Traversal (`postOrderTraverse`):",
    "- Traverses the left and right subtrees first, then visits the current node.",
    "- Often used for deleting or freeing nodes in a Binary Search Tree (BST), or for evaluating expression trees.",
    "- Follows the pattern: **Left → Right → Root**.",

    "Each function accepts a BST and an array, recursively fills the array with node values in the correct order, and returns it.",

    "### Complexity Analysis:",
    "**Time Complexity:** O(n) — Each node in the BST is visited exactly once.",

    "**Space Complexity:**",
    "- O(n) for the array containing all node values.",
    "- O(h) auxiliary space for the recursion stack, where h is the height of the BST (O(log n) for balanced BSTs, O(n) for unbalanced ones)."
  ],
  "date": "2025-03-18"
},
{
  "title": "Creating a Minimal Height BST from a Sorted Array",
  "content": [
    "This Python function constructs a Binary Search Tree (BST) with minimal height from a sorted array. This technique ensures the tree is as balanced as possible, optimizing search efficiency."
  ],
  "images": [
    "algorithms_pics/min_height_bst.png"
  ],
  "description": [
    "### Core Idea Behind Minimal Height BST Construction:",
    "1. **Balanced BST Structure**",
    "- A BST with minimal height ensures that operations like search, insert, and delete can be performed efficiently.",
    "- By choosing the middle element of the array as the root and recursively applying the same logic to the subarrays, the BST remains balanced.",

    "2. **Recursive Construction Approach**",
    "- The function `constructMinHeightBst()` is used to build the tree recursively.",
    "- At each recursive step, it picks the middle element of the current subarray and inserts it into the BST.",
    "- This ensures a roughly balanced distribution of nodes across the left and right subtrees.",

    "3. **Tree Construction Process**",
    "- Start with the full sorted array and determine the middle index.",
    "- Insert the middle value into the BST using the `insert()` method.",
    "- Recursively construct the left and right subtrees using the left and right halves of the array.",
    "- The recursion stops when the subarray is exhausted.",

    "### Complexity Analysis:",
    "**Time Complexity:** O(n log n) — The function inserts `n` elements into the BST, and each insertion takes O(log n) time on average.",
    "**Space Complexity:** O(n) — Due to the recursive call stack and the storage of all `n` nodes in the BST."
  ],
  "date": "2025-06-17"
},
{
  "title": "Efficiently Building a Minimal Height BST from a Sorted Array (O(n) Time)",
  "content": [
    "This implementation constructs a Binary Search Tree (BST) with minimal height directly from a sorted array — in linear time, O(n), by avoiding the use of repeated insertions."
  ],
  "images": [
    "algorithms_pics/min_height_bst_optimized.png"
  ],
  "description": [
    "### Overview:",
    "This solution efficiently builds a minimal height Binary Search Tree (BST) from a sorted array by directly linking child nodes rather than inserting values one by one.",
    
    "### How It Works:",
    "1. The array is sorted, so the middle element at each step is chosen as the root of the current (sub)tree.",
    "2. The left and right halves of the array are then recursively used to build the left and right subtrees.",
    "3. Instead of inserting each value with the `.insert()` method, which traverses the tree and takes O(log n) time per insertion, the tree nodes are connected directly during recursion.",
    
    "### Key Advantages over Traditional Insert-Based Construction:",
    "**Insert-Based Approach:**",
    "- Uses `bst.insert(value)` repeatedly during recursion.",
    "- Each insertion takes O(log n) time (on average).",
    "- Total Time Complexity: **O(n log n)** for `n` insertions.",
    
    "**Direct Linkage Approach (this implementation):**",
    "- Avoids insertion logic by manually setting `.left` and `.right` pointers during recursion.",
    "- Each node is visited exactly once, and no tree traversal is needed.",
    "- Total Time Complexity: **O(n)**.",
    
    "### Complexity Analysis:",
    "**Time Complexity:** O(n) — Every node is created once, and linking is done in constant time per node.",
    "**Space Complexity:** O(n) — Due to the recursion stack and storage of all nodes in the BST.",
    
    "### Use Case:",
    "This approach is ideal when building a BST from a static, sorted dataset where balance and performance are key, such as for search-heavy applications or as a preprocessing step for efficient lookups."
  ],
  "date": "2025-06-18"
},
{
  "title": "Finding the K-th Largest Value in a BST (Binary Search Tree)",
  "content": [
    "This Python algorithm efficiently retrieves the k-th largest value in a Binary Search Tree (BST) using a reverse in-order traversal."
  ],
  "images": [
    "algorithms_pics/kth_largest_bst.png"
  ],
  "description": [
    "### Why Reverse In-Order Traversal?",
    "- A standard in-order traversal of a BST visits nodes in **ascending order**.",
    "- A **reverse in-order traversal** (Right → Node → Left) visits nodes in **descending order**.",
    "- This makes it ideal for finding the k-th largest element, as the traversal directly yields the largest values first.",

    "### How the Algorithm Works:",
    "1. **TreeInfo Class**",
    "- Holds two pieces of information during traversal:",
    "  - `numberOfNodesVisited`: Counts how many nodes have been visited.",
    "  - `latestVisitedNodeValue`: Stores the current candidate for the k-th largest value.",

    "2. **Reverse Traversal with Early Stopping**",
    "- The function recursively visits the right subtree first (largest values).",
    "- After each node visit, it increments the counter and updates the latest visited value.",
    "- Once `k` nodes have been visited, the traversal stops early for efficiency.",

    "3. **Function Entry Point**",
    "- The public function `findKthLargestValueInBst()` sets up the tracking object and initiates the traversal.",
    "- It returns the k-th largest node's value as stored in `latestVisitedNodeValue`.",

    "### Complexity Analysis:",
    "**Time Complexity:** O(h + k) — Where `h` is the height of the tree. In the worst case (unbalanced BST), this could be up to O(n), but for a balanced tree, it's roughly O(log n + k).",
    "**Space Complexity:** O(h) — Due to recursion stack from tree traversal."
  ],
  "date": "2025-06-19"
},
{
  "title": "Reconstructing a BST from Preorder Traversal",
  "content": [
    "This Python algorithm reconstructs a Binary Search Tree (BST) from its preorder traversal using recursion and value bounds."
  ],
  "images": [
    "algorithms_pics/bst_reconstruction.png"
  ],
  "description": [
    "### Why Preorder Traversal Reconstruction?",
    "- A preorder traversal of a BST lists nodes in the order: **Root → Left → Right**.",
    "- Given only this list, it’s possible to reconstruct the original BST if the BST property is preserved (left < root < right).",

    "### How the Algorithm Works:",
    "1. **Tracking Index with `TreeInfo`**",
    "- A helper class `TreeInfo` holds the current index (`rootIdx`) in the preorder list.",
    "- This ensures that each recursive call knows which value to consider as the root of the current subtree.",

    "2. **Bounded Recursion**",
    "- The core idea is to use a range (`lowerBound`, `upperBound`) to determine whether a value fits in the current subtree.",
    "- If a value is out of range, it does not belong in that subtree, and recursion returns `None`.",
    "- The root value splits the range for left and right subtrees recursively.",

    "3. **Building the Tree**",
    "- Starting from index 0, the function builds the tree top-down:",
    "  - The first value is used as the root.",
    "  - It recursively builds the left subtree using values less than the root.",
    "  - Then it builds the right subtree using values greater than or equal to the root.",

    "### Complexity Analysis:",
    "**Time Complexity:** O(n) — Each node is processed once in a single pass.",
    
    "**Space Complexity:**",
    "- O(n) total space:",
    "  - O(h) auxiliary space for the recursion stack, where `h` is the height of the BST (O(log n) for balanced trees, O(n) in the worst case).",
    "  - O(n) for the space required to actually store the reconstructed BST with `n` nodes."
  ],
  "date": "2025-06-20"
},







]
