[
{
    "title": "Finding the Closest Value in a Binary Search Tree (BST)",
    "content": [
        "This Python function efficiently finds the value in a Binary Search Tree (BST) that is closest to a given target value."
    ],
    "images": ["algorithms_pics/find_closest_bst0.png", "algorithms_pics/find_closest_bst1.png"],
    "description": [
        "### Key Features of the Closest Value in BST Function:",
        "1. **Binary Search Tree Properties:**",
        "   - Each node in a BST has a value and two child nodes: `left` and `right`.",
        "   - The left child node contains values smaller than the parent node.",
        "   - The right child node contains values greater than the parent node.",
        "",
        "2. **Logic for Finding the Closest Value:**",
        "   - The function starts at the root node and initializes the `closest` variable to infinity.",
        "   - It traverses the tree while updating the closest value if the current node's value is nearer to the target.",
        "   - Depending on whether the target is smaller or larger than the current node's value, it moves to the left or right subtree, respectively.",
        "",
        "3. **Output:**",
        "   - Returns the value in the BST that is closest to the target.",
        "",
        "### Complexity Analysis:",
        "**Time Complexity:**",
        "- In the average and best cases (balanced BST), the time complexity is **O(log n)**, as each step reduces the search space by half.",
        "- In the worst case (unbalanced BST, resembling a linked list), the time complexity is **O(n)** because the function may traverse the entire tree.",
        "",
        "**Space Complexity:**",
        "- The space complexity for this iterative solution is **O(1)** because only a few variables (e.g., `closest`, `currentNode`) are used.",
        "- In a recursive approach, the space complexity would be **O(h)**, where `h` is the height of the tree (up to **O(n)** in the worst case)."
    ],
    "date": "2024-12-13"
},{
  "title": "Implementing a Binary Search Tree (BST) in Python",
  "content": [
    "This Python class implements a Binary Search Tree (BST) with support for insertion, search, and removal operations. The BST is a fundamental data structure that stores elements in an ordered manner, allowing efficient lookups and updates."
  ],
  "images": [
    "algorithms_pics/bst_construction1.png",
    "algorithms_pics/bst_construction2.png"
  ],
  "description": [
    "### Key Features of the BST Class:",

    "1. **Insert Method (`insert`)**",
    "- Adds a new value to the BST while maintaining the binary search property.",
    "- Traverses the tree from the root, placing the new value in the appropriate position based on comparisons.",

    "2. **Search Method (`contains`)**",
    "- Checks whether a given value exists in the BST.",
    "- Starts at the root and follows the left or right child depending on whether the target value is smaller or larger.",

    "3. **Remove Method (`remove`)**",
    "- Removes a node from the BST while preserving the structure.",
    "- Handles three cases: node with two children, one child, or no children.",
    "- For a node with two children, it replaces the node's value with the smallest value from its right subtree (in-order successor).",
    "- For root deletions with one child, it adjusts the root node to simulate in-place removal.",

    "4. **Helper Method (`getMinValue`)**",
    "- Traverses to the leftmost node of a subtree to find the minimum value (used during removal).",

    "### Complexity Analysis:",

    "**Time Complexity (Average Case):**",
    "- Insertion, Search, and Deletion: O(log n)",

    "**Time Complexity (Worst Case):**",
    "- If the BST becomes unbalanced (e.g., resembles a linked list), operations degrade to O(n)",

    "**Space Complexity:**",
    "- O(1) auxiliary space for iterative methods, O(h) stack space for recursive removal where h is tree height."
  ],
  "date": "2025-03-16"
},
    {
  "title": "Validating a Binary Search Tree (BST) in Python",
  "content": [
    "This Python function checks whether a given binary tree satisfies the properties of a Binary Search Tree (BST)."
  ],
  "images": [
    "algorithms_pics/bst_validation.png"
  ],
  "description": [
    "### How the Function Works:",
    "1. **What Makes a Tree a Valid BST?**",
    "- In a valid BST, every node must satisfy two conditions:",
    "  - All values in the left subtree are strictly less than the node’s value.",
    "  - All values in the right subtree are greater than or equal to the node’s value.",
    "- These rules must hold recursively for every node in the tree.",
    
    "2. **Recursive Validation with Min/Max Constraints:**",
    "- A helper function `validateBstHelper()` is used to traverse the tree recursively.",
    "- It ensures that each node’s value lies within a valid range defined by `minValue` and `maxValue`.",
    "- The left child is checked with an updated upper bound, and the right child with an updated lower bound.",
    
    "3. **Why This Approach is Reliable:**",
    "- Unlike an in-order traversal check, this method directly validates BST rules at each node.",
    "- It immediately detects violations deep in the tree structure, even if the overall order appears correct.",
    
    "### Complexity Analysis:",
    "**Time Complexity:** O(n) — Each node is visited once.",
    "**Space Complexity:**",
    "- O(log n) for a balanced tree due to recursion depth.",
    "- O(n) in the worst case (e.g., a skewed tree)."
  ],
  "date": "2025-03-17"
}



]
