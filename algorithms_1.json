[
    {
        "title": "Finding Two Numbers That Sum to a Target",
        "content": [
            "This Python function efficiently finds two numbers in a list that sum to a given target."
        ],
        "images": ["algorithms_pics/twoNumberSum.png"],
        "description": [
            "This code uses a dictionary to track numbers as it iterates through the array. Here's how it works:",
            "1. A dictionary called `seen` is initialized to store numbers that have been processed.",
            "2. For each number in the array, the difference between the target sum and the current number is calculated.",
            "3. If this difference exists in the dictionary `seen`, it means the pair of numbers that sum to the target has been found, and the function returns them.",
            "4. If the difference is not found, the current number is added to the dictionary for future reference.",
            "5. If no pair is found after iterating through the array, an empty list is returned."
        ],
        "date": "2024-12-08"
    },
    {
    "title": "Validating a Subsequence",
    "content": [
        "This Python function checks if a given sequence is a subsequence of a larger array."
    ],
    "images": ["algorithms_pics/validate_subsequence.png"],
    "description": [
        "### Explanation of the Code:",
        "1. **Function Purpose:**",
        "   - The function `isValidSubsequence()` takes two arguments: an array and a sequence.",
        "   - It returns `True` if the sequence is a valid subsequence of the array, otherwise it returns `False`.",
        "2. **How It Works:**",
        "   - The function iterates through the array and tries to match elements with the sequence. It keeps track of the position in the sequence with the variable `seqidx`.",
        "   - Each time an element in the array matches the current element in the sequence, `seqidx` is incremented to check the next element in the sequence.",
        "   - If the entire sequence is matched by the end of the array, the function returns `True`.",
        "   - If the sequence is not completely matched or the array is exhausted, it returns `False`.",
        "3. **Edge Case:**",
        "   - The function ensures that the sequence is not empty and the full sequence is present in the array before returning `True`."
    ],
    "date": "2024-12-09"
},
{
    "title": "Determine the Winner of a Tournament",
    "content": [
        "This Python function calculates the winner of a tournament by processing match results and awarding points to teams based on their performance."
    ],
    "images": ["algorithms_pics/tournament_winner.png"],
    "description": [
        "### Key Features of the Tournament Winner Script:",
        "1. **Input Processing:**",
        "   - Accepts a list of competitions, where each element contains two competing teams.",
        "   - Accepts a results list that indicates the winner of each match. A value of `1` means the home team won, while `0` means the away team won.",
        "2. **Points Calculation:**",
        "   - Iterates through all matches, awarding 3 points to the winner of each competition.",
        "   - Stores the points in a dictionary where the key is the team name, and the value is the total score.",
        "3. **Determine the Winner:**",
        "   - Identifies the team(s) with the highest total points after all competitions.",
        "   - Handles tie situations by returning all teams with the highest score as co-winners.",
        "### How It Works:",
        "1. For each match in the `competitions` list, the script determines the winner based on the corresponding value in the `results` list.",
        "2. Points are added to the winning team's total in the `points` dictionary.",
        "3. After all matches, the script identifies the team(s) with the maximum score.",
        "4. If one team has the highest score, it declares them as the winner. If there is a tie, it declares multiple winners.",
        "### Benefits:",
        "- Efficiently calculates the tournament winner even with large datasets.",
        "- Handles tie-breaking scenarios gracefully.",
        "- Provides clear and concise output with the winner or co-winners of the tournament."
    ],
    "date": "2024-12-10"
},
{
    "title": "Find the Minimum Non-Constructible Change",
    "content": [
        "This Python script determines the smallest amount of change that cannot be constructed using a given set of coin denominations."
    ],
    "images": ["algorithms_pics/non_constructible_change.png"],
    "description": [
        "### Key Features of the Script:",
        "1. **Input Processing:**",
        "   - Accepts a list of integers representing coin denominations.",
        "2. **Sorting for Efficiency:**",
        "   - The coins are sorted to enable a systematic approach for calculating constructible change.",
        "3. **Logic for Non-Constructible Change:**",
        "   - Iterates through the sorted coins to determine the smallest value that cannot be formed by the current sum of coins.",
        "   - If a coin is greater than the current sum of change plus 1, the next smallest non-constructible change is returned.",
        "4. **Output:**",
        "   - Returns the minimum value that cannot be constructed using the available coin denominations.",
        "### How It Works:",
        "1. The script sorts the input list of coins in ascending order.",
        "2. It initializes a variable `change` to track the largest amount of change that can be constructed so far.",
        "3. For each coin in the sorted list:",
        "   - If the coin is larger than `change + 1`, the script returns `change + 1` as the smallest non-constructible change.",
        "   - Otherwise, the coin is added to `change`, extending the range of constructible values.",
        "4. After iterating through all the coins, the script outputs the result.",
        "### Benefits:",
        "- Efficiently determines the smallest non-constructible change using sorting and a single loop.",
        "- Handles edge cases where coins may not start from small values (e.g., `[5, 7, 22]`).",
        "- Provides a simple yet effective solution to a common computational problem."
    ],
    "date": "2024-12-11"
},
{
    "title": "Matrix Transposition in Python",
    "content": [
        "This Python script demonstrates how to transpose a matrix, which involves flipping rows and columns."
    ],
    "images": ["algorithms_pics/matrix_transpose.png"],
    "description": [
        "### Key Features of the Matrix Transposition Script:",
        "1. **Input Handling:**",
        "   - Accepts a 2D list (matrix) where each inner list represents a row of the matrix.",
        "2. **Logic for Transposition:**",
        "   - Iterates through the columns of the matrix.",
        "   - For each column, constructs a new row by extracting the corresponding elements from each original row.",
        "3. **Output:**",
        "   - Returns a new 2D list where rows and columns have been swapped.",
        "### How It Works:",
        "1. The script calculates the number of rows and columns in the input matrix.",
        "2. A nested loop iterates over each column (`j`) and extracts elements from all rows (`i`).",
        "3. The extracted elements are added to a new row, which is then appended to the transposed matrix.",
        "4. The result is printed row by row, showing the transposed matrix.",
        "### Benefits:",
        "- Provides a clear and simple method to transpose any rectangular matrix.",
        "- Useful for applications in data analysis, image processing, and scientific computations."
    ],
    "date": "2024-12-12"
},   
{
    "title": "Finding the Closest Value in a Binary Search Tree (BST)",
    "content": [
        "This Python function efficiently finds the value in a Binary Search Tree (BST) that is closest to a given target value."
    ],
    "images": ["algorithms_pics/find_closest_bst0.png", "algorithms_pics/find_closest_bst1.png"],
    "description": [
        "### Key Features of the Closest Value in BST Function:",
        "1. **Binary Search Tree Properties:**",
        "   - Each node in a BST has a value and two child nodes: `left` and `right`.",
        "   - The left child node contains values smaller than the parent node.",
        "   - The right child node contains values greater than the parent node.",
        "2. **Logic for Finding the Closest Value:**",
        "   - The function starts at the root node and initializes the `closest` variable to infinity.",
        "   - It traverses the tree while updating the closest value if the current node's value is nearer to the target.",
        "   - Depending on whether the target is smaller or larger than the current node's value, it moves to the left or right subtree, respectively.",
        "3. **Output:**",
        "   - Returns the value in the BST that is closest to the target."
    ],
    "date": "2024-12-13"
},
    {
    "title": "Calculating Branch Sums in a Binary Tree",
    "content": [
        "This Python script computes the sum of values along each branch from the root to the leaf nodes in a binary tree."
    ],
    "images": [
        "algorithms_pics/branch_sums1.png",
        "algorithms_pics/branch_sums2.png"
    ],
    "description": [
        "### Key Features of the Branch Sums Script:",
        "1. **Binary Tree Structure:**",
        "   - Each node in the binary tree contains a `value` and two child nodes: `left` and `right`.",
        "2. **Logic for Calculating Branch Sums:**",
        "   - The function `branchSums()` initializes an empty list `result` to store the sums of all branches.",
        "   - A helper function `calculateBranchSums()` is used to recursively traverse the tree and calculate the sum for each branch.",
        "   - For each node, the current sum is updated by adding the node's value.",
        "   - When a leaf node (node with no children) is reached, the current branch sum is added to the `result` list.",
        "3. **Output:**",
        "   - The function returns a list of integers representing the sums of all branches from the root to each leaf."
    ],
    "date": "2024-12-14"
},
    {
    "title": "Calculating Node Depths in a Binary Search Tree (BST)",
    "content": [
        "This Python script calculates the sum of the depths of all nodes in a binary search tree (BST) using recursion."
    ],
    "images": [
        "algorithms_pics/node_depths.png"
    ],
    "description": [
        "### Key Features of the Node Depth Calculation Script:",
        "1. **Binary Search Tree Structure:**",
        "   - Each node in the BST contains a `value` and two child nodes: `left` and `right`.",
        "2. **Recursive Logic for Depth Calculation:**",
        "   - The function `nodeDepths()` takes two arguments: the root node and the current depth (initially set to 0).",
        "   - At each step, the function adds the current depth to the sum and calls itself recursively for the left and right subtrees with an incremented depth.",
        "   - The base case is reached when a `None` node is encountered, returning 0.",
        "3. **Output:**",
        "   - Returns the total sum of depths of all nodes in the BST.",
        "",
        "### How the Code Works:",
        "1. A binary search tree is created by initializing the `BST` class and linking nodes to form the tree.",
        "2. The `nodeDepths()` function is called with the root node.",
        "3. The function recursively computes the sum of depths by traversing all nodes in the tree."
    ],
    "date": "2024-12-15"
},
    {
    "title": "Evaluating an Expression Tree in Python",
    "content": [
        "This Python script evaluates an expression tree where each internal node represents an operator, and each leaf node represents an operand."
    ],
    "images": [
        "algorithms_pics/expression_tree.png"
    ],
    "description": [
        "### Key Features of the Expression Tree Evaluation Script:",
        "1. **Binary Tree Structure:**",
        "   - Each node in the binary tree contains a `value`, `left`, and `right` pointers.",
        "   - Leaf nodes (nodes without children) contain positive integers representing operands.",
        "   - Internal nodes contain negative integers representing operators:",
        "     - `-1`: Addition (`+`)",
        "     - `-2`: Subtraction (`-`)",
        "     - `-3`: Division (`/`)",
        "     - `-4`: Multiplication (`*`)",
        "",
        "2. **Recursive Evaluation Logic:**",
        "   - The function `evaluateExpressionTree()` recursively traverses the tree.",
        "   - If a leaf node is reached (value >= 0), it directly returns the node's value.",
        "   - If an internal node is reached (value < 0), it evaluates the left and right subtrees recursively.",
        "   - Based on the operator at the current node, it performs the corresponding arithmetic operation on the values returned by the left and right subtrees.",
        "",
        "3. **Output:**",
        "   - The function returns the result of evaluating the expression represented by the tree."
    ],
    "date": "2024-12-16"
},
{
    "title": "Calculating Minimum Waiting Time for Queries",
    "content": [
        "This Python script calculates the minimum total waiting time for a series of tasks or queries when they are executed in sequence."
    ],
    "images": ["algorithms_pics/minimum_waiting_time.png"],
    "description": [
        "### Key Features of the Minimum Waiting Time Script:",
        "1. **Sorting for Optimization:**",
        "   - The function begins by sorting the query durations in ascending order. This ensures that shorter queries are processed first, minimizing the waiting time for longer queries.",
        "2. **Logic for Calculating Waiting Time:**",
        "   - A cumulative sum (`cumulative_duration`) is maintained to keep track of the total duration of queries that have been processed so far.",
        "   - For each query, the cumulative duration is added to the total waiting time before being updated with the current query's duration.",
        "3. **Output:**",
        "   - The function returns the minimum total waiting time for all queries."
    ],
    "date": "2025-01-04"
},
    {
    "title": "Maximizing Speed with the Tandem Bicycle Problem",
    "content": [
        "This Python script calculates the maximum or minimum possible total speed of pairs of cyclists on a tandem bicycle."
    ],
    "images": ["algorithms_pics/tandem_bicycle.png"],
    "description": [
        "### Key Features of the Tandem Bicycle Script:",
        "1. **Input and Sorting:**",
        "   - The function takes two lists of cyclist speeds, `redShirtSpeeds` and `blueShirtSpeeds`, and a boolean `fastest` to determine whether the goal is to maximize or minimize total speed.",
        "   - Both speed lists are sorted in ascending order. If `fastest` is `True`, the `blueShirtSpeeds` list is reversed into descending order to pair the fastest cyclist with the slowest one for maximum speed.",
        "2. **Pairing Cyclists:**",
        "   - The script iterates through the sorted lists, pairing cyclists from `redShirtSpeeds` and `blueShirtSpeeds`.",
        "   - For each pair, the higher speed is selected to maximize the total speed of the tandem bicycle.",
        "3. **Output:**",
        "   - The function returns the total speed of the paired cyclists based on the pairing strategy determined by the `fastest` parameter."
    ],
    "date": "2025-01-05"
},
    {
    "title": "Removing Duplicates from a Linked List in Python",
    "content": [
        "This Python script efficiently removes duplicate values from a sorted linked list."
    ],
    "images": [
        "algorithms_pics/remove_duplicates_linkedlist.png"
    ],
    "description": [
        "### Key Features of the Script:",
        "1. **Input Structure:**",
        "   - A `LinkedList` class is used to represent nodes in the linked list. Each node contains a `value` and a `next` pointer to the subsequent node.",
        "2. **Logic for Removing Duplicates:**",
        "   - The script iterates through the linked list, comparing the value of the current node with the next node.",
        "   - If duplicate nodes are found, the `next` pointer of the current node is updated to skip the duplicate nodes and point to the next distinct node.",
        "3. **Output:**",
        "   - The function returns the modified linked list with duplicates removed, preserving the sorted order."
    ],
    "date": "2025-01-04"
}






]

